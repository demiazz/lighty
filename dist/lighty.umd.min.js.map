{"version":3,"file":null,"sources":["../src/query-selector.js","../src/index.js","../src/builder.js","../src/application.js","../src/plugin.js"],"sourcesContent":["/**\n * Provides utilities to work with the search for `DOM` tree.\n *\n * @module query-selector\n *\n * @protected\n * @since 0.4.0\n */\n\n\n/**\n * Extracts {@link external:MatchesFn} method from `DOM API`.\n *\n * Uses workaround for vendor prefixed methods in old browsers.\n *\n * @example\n *\n * <div class=\"element\"><div>\n *\n * @example\n *\n * const element = document.querySelector('.element');\n * const matchesFn = getMatchesFn();\n *\n * matchesFn.call(element, '.element'); // => true\n * matchesFn.call(element, '.not-element'); // => false\n *\n * @return {external:MatchesFn} extracted {@link external:MatchesFn} method.\n *\n * @private\n * @since 0.4.0\n */\nfunction getMatchesFn() {\n  const e = document.documentElement;\n\n  return (\n    e.matches ||\n    e.matchesSelector ||\n    e.msMatchesSelector ||\n    e.mozMatchesSelector ||\n    e.webkitMatchesSelector ||\n    e.oMatchesSelector\n  );\n}\n\n/**\n * {@link external:MatchesFn} extracted from `DOM API`.\n *\n * @example\n *\n * <div class=\"element\"><div>\n *\n * @example\n *\n * const element = document.querySelector('.element');\n *\n * matchesFn.call(element, '.element'); // => true\n * matchesFn.call(element, '.not-element'); // => false\n *\n * @type external:MatchesFn\n *\n * @private\n * @since 0.4.0\n */\nconst matchesFn = getMatchesFn();\n\n/**\n * Wrapper around {@link matchesFn}.\n *\n * @example\n *\n * <div class=\"element\"><div>\n *\n * @example\n *\n * const element = document.querySelector('.element');\n *\n * matches(element, '.element'); // => true\n * matches(element, '.not-element'); // => false\n *\n * @param {external:Element} element - element to test.\n * @param {Selector} selector - CSS selector to test.\n *\n * @return {Boolean} `true` if the specified selector would select the element;\n * otherwise, returns `false`.\n *\n * @private\n * @since 0.4.0\n */\nfunction matches(element, selector) {\n  return matchesFn.call(element, selector);\n}\n\n/**\n * Creates new array with all items that is a {@link external:Element}'s\n * instances.\n *\n * @param {Array.<*>} nodes - items.\n *\n * @return {Array.<external:Element>} filtered array.\n *\n * @private\n * @since 0.5.0\n */\nfunction filterElements(elements) {\n  return elements.filter(element => element instanceof Element);\n}\n\n/**\n * Selects all elements by selector inside given tree (includes tree self too).\n *\n * @example\n *\n * <div class=\"tree\">\n *   <div class=\"leaf\">\n *   <div class=\"leaf\">\n * </div>\n *\n * @example\n *\n * querySelector('.tree', '.leaf'); // => [<.leaf>, <.leaf>]\n *\n * @example\n *\n * querySelector('.tree', '.tree, .leaf'); // => [<.tree>, <.leaf>, <.leaf>]\n *\n * @example\n *\n * const tree = document.querySelector('.tree');\n *\n * querySelector(tree, '.leaf') // => [<.leaf>, <.leaf>]\n *\n * @example\n *\n * const tree = document.querySelectorAll('.tree');\n *\n * querySelector(tree, '.leaf') // => [<.leaf>, <.leaf>]\n *\n * @example\n *\n * const tree = [document.querySelector('.tree')];\n *\n * querySelector(tree, '.leaf') // => [<.leaf>, <.leaf>]\n *\n * @example\n *\n * const tree = $('.tree');\n *\n * querySelector(tree, '.leaf') // => [<.leaf>, <.leaf>]\n *\n * @param {Tree} tree - tree inside of which will be searched for elements.\n * @param {Selector} selector - valid CSS selector.\n *\n * @return {external:Element[]} elements selected by specified selector.\n *\n * @protected\n * @since 0.4.0\n */\nfunction querySelector(tree, selector) {\n  if (tree.jquery) {\n    return tree.filter(selector).add(tree.find(selector)).toArray();\n  }\n\n  let roots = [];\n\n  if (tree instanceof Element) {\n    roots = [tree];\n  } else if (tree instanceof NodeList) {\n    roots = filterElements([].slice.call(tree));\n  } else if (Array.isArray(tree)) {\n    roots = filterElements(tree);\n  } else if (typeof tree === 'string') {\n    roots = [].slice.call(document.querySelectorAll(tree));\n  }\n\n  return roots.reduce((elements, root) => {\n    if (matches(root, selector)) {\n      elements.push(root);\n    }\n\n    return elements.concat(\n      [].slice.call(root.querySelectorAll(selector))\n    );\n  }, []);\n}\n\n\nexport default querySelector;\n","/**\n * Provides public API.\n *\n * @module index\n *\n * @public\n */\n\nimport Application from './application';\nimport Plugin from './plugin';\nimport querySelector from './query-selector';\n\n\n/**\n * Default query selector which used by default.\n *\n * Use them as a base if you want to write custom query selector.\n *\n * @example\n *\n * function customQuerySelector(tree, selector) {\n *   const modifiedSelector = modifySelector(selector);\n *\n *   return querySelector(tree, modifiedSelector);\n * }\n *\n * @constant querySelector\n * @type QuerySelector\n *\n * @public\n * @since 0.4.1\n */\nexport { querySelector };\n\n/**\n * Creates application instance.\n *\n * @example\n *\n * const application = createApplication();\n *\n * application.component('.example', {\n *   // ...\n * });\n *\n * @param {?ApplicationOptions} options - application options.\n *\n * @return {module:application~Application} created application instance.\n *\n * @public\n * @since 0.5.0\n */\nexport function createApplication(options) {\n  return new Application(options);\n}\n\n/**\n * Creates {@link module:plugin~Plugin} factory with given name and initializer.\n *\n * Initializer used for transportation arguments to transformation function if\n * needed.\n *\n * @example\n *\n * const plugin = createPlugin('awesome-plugin', function initializer() {\n *   return function transform(component, element) {\n *     // transform component here\n *   }\n * });\n *\n * const application = create({ plugins: [plugin] });\n *\n * @example\n *\n * const factory = createPlugin('awesome-plugin', function initializer(...args) {\n *   return function transform(component, element) {\n *     // `args` available here\n *   };\n * });\n *\n * const plugin = factory(\n *   // your awesome arguments here\n * );\n *\n * const application = createApplication({ plugins: [plugin] });\n *\n * @param {String} name - plugin's name.\n * @param {PluginInitializationFn} initializer - add description.\n *\n * @return {PluginFactoryFn} plugin's factory.\n *\n * @public\n * @since 0.5.0\n */\nexport function createPlugin(name, initializer) {\n  return function factory(...args) {\n    return new Plugin(name, initializer(...args));\n  };\n}\n","/**\n * Provides Builder class.\n *\n * @module builder\n *\n * @protected\n * @since 0.2.0\n */\n\n\n/**\n * Creates {@link ComponentPrototype}'s instances for elements in specified tree.\n *\n * @property {Number} id - unique identificator.\n * @property {Selector} selector - CSS selector for searching elements.\n * @property {ComponentPrototype} proto - components' prototype.\n * @property {Array.<module:plugin~Plugin>} plugins - list of plugins.\n * @property {QuerySelector} querySelector - function for search elements in a tree.\n *\n * @protected\n * @since 0.2.0\n */\nclass Builder {\n  /**\n   * Creates a builder instance.\n   *\n   * @param {Number} id - unique identificator.\n   * @param {Selector} selector - CSS selector for searching elements.\n   * @param {ComponentPrototype} proto - components' prototype.\n   * @param {Array.<module:plugin~Plugin>} plugins - list of plugins.\n   * @param {QuerySelector} querySelector - function for search elements in a tree.\n   */\n  constructor(id, selector, proto, plugins, querySelector) {\n    this.id = id;\n    this.selector = selector;\n    this.proto = proto;\n    this.plugins = plugins;\n    this.querySelector = querySelector;\n  }\n\n  /**\n   * Search elements in specified tree. Creates {@link Component}'s instance\n   * for each element (if not has been set up early). And generate\n   * initialization function, which calls {@link ComponentInitFn} for each\n   * created component, if a component has a {@link ComponentInitFn}.\n   *\n   * @param {Tree} [tree = document.body] - specified tree.\n   *\n   * @return {InitializerFn} initialization function.\n   *\n   * @protected\n   * @since 0.2.0\n   */\n  getInitializer(tree = document.body) {\n    const elements = this.querySelector(tree, this.selector);\n\n    const components = elements.reduce((cs, element) => {\n      if (this.checkAndUpdateCache(element)) {\n        cs.push(this.createComponent(element));\n      }\n\n      return cs;\n    }, []);\n\n    return function initializer() {\n      components.forEach((component) => {\n        if (!component.init) {\n          return;\n        }\n\n        component.init();\n      });\n    };\n  }\n\n  /**\n   * Creates {@link Component}'s instance and applies plugins to them.\n   *\n   * @param {external:Element} element - specified element.\n   *\n   * @return {Component} created {@link Component}'s instance.\n   *\n   * @private\n   * @since 0.2.0\n   */\n  createComponent(element) {\n    const component = Object.keys(this.proto).reduce((instance, property) => {\n      instance[property] = this.proto[property];\n\n      return instance;\n    }, { });\n\n    this.transformComponent(component, element);\n\n    return component;\n  }\n\n  /**\n   * Checks have been created a component for specified element. Update meta\n   * information about linked components if not.\n   *\n   * @param {external:Element} element - specified element.\n   *\n   * @return {Boolean} `true` if component isn't has been created; otherwise\n   * returns `false`.\n   *\n   * @private\n   * @since 0.2.0\n   */\n  checkAndUpdateCache(element) {\n    if (element.ids && element.ids.indexOf(this.id) !== -1) {\n      return false;\n    }\n\n    element.ids = element.ids ? element.ids.concat(this.id) : [this.id];\n\n    return true;\n  }\n\n  /**\n   * Applies plugins to specified component and element one by one.\n   *\n   * @param {Component} component - component which will be transformed.\n   * @param {external:Element} element - element which associated\n   * with the component.\n   *\n   * @return {void} nothing.\n   *\n   * @private\n   * @since 0.2.0\n   */\n  transformComponent(component, element) {\n    this.plugins.forEach((plugin) => {\n      plugin.transform(component, element);\n    });\n  }\n}\n\n\nexport default Builder;\n","/**\n * Provides Application class.\n *\n * @module application\n *\n * @protected\n * @since 0.2.0\n */\n\nimport Builder from './builder';\nimport querySelector from './query-selector';\n\n\n/**\n * Creates an application and start them immediately or when a document\n * will be loaded.\n *\n * @property {Array.<module:builder~Builder>} builders - list of builders.\n * @property {Boolean} isRunning - flag which indicates application running or not.\n * @property {QuerySelector} querySelector - query selector used by application.\n * @property {Array.<module:plugin~Plugin>} plugins - list of plugins.\n *\n * @public\n * @since 0.2.0\n */\nclass Application {\n  /**\n   * Creates an application instance.\n   *\n   * @param {ApplicationOptions} [options = { }] - options object.\n   */\n  constructor(options = { }) {\n    this.builders = [];\n    this.isRunning = false;\n\n    // Query selector\n\n    this.querySelector = options.querySelector || querySelector;\n\n    // Plugins\n\n    this.plugins = [];\n\n    if (options.plugins) {\n      this.plugins = options.plugins.map((plugin) => {\n        if (plugin instanceof Function) {\n          return plugin();\n        }\n\n        return plugin;\n      });\n    }\n\n    // Running\n\n    if (document.readyState !== 'loading') {\n      // See https://connect.microsoft.com/IE/feedback/details/792880/document-readystat\n      setTimeout(this.start.bind(this), 1);\n    } else {\n      document.addEventListener('DOMContentLoaded', this.start.bind(this));\n    }\n  }\n\n  /**\n   * Creates {@link module:builder~Builder} instance for specified selector\n   * and prototype, and register them inside of application.\n   *\n   * Creates the {@link ComponentPrototype}'s instances for all suitable\n   * components on a page if application already running.\n   *\n   * @param {Selector} selector - specified CSS selector.\n   * @param {ComponentPrototype} proto - specified prototype.\n   *\n   * @return {Void} nothing.\n   *\n   * @public\n   * @since 0.2.0\n   */\n  component(selector, proto) {\n    const id = this.builders.length;\n    const builder = new Builder(\n      id, selector, proto, this.plugins, this.querySelector\n    );\n\n    this.builders.push(builder);\n\n    if (this.isRunning) {\n      const initializer = builder.getInitializer();\n\n      initializer();\n    }\n  }\n\n  /**\n   * Creates components through all registered {@link module:builder~Builder}s\n   * for all elements inside specified tree.\n   *\n   * @param {Tree} tree - specified tree.\n   *\n   * @return {Void} nothing.\n   *\n   * @public\n   * @since 0.2.0\n   */\n  vitalize(tree) {\n    this.builders.forEach((builder) => {\n      const initialize = builder.getInitializer(tree);\n\n      initialize();\n    });\n  }\n\n  /**\n   * Sets `isRunning` flag to true and vitalizes all elements on a page.\n   *\n   * @return {Void} nothing.\n   *\n   * @private\n   * @since 0.2.0\n   */\n  start() {\n    this.isRunning = true;\n\n    this.vitalize();\n  }\n}\n\n\nexport default Application;\n","/**\n * Provides Plugin class.\n *\n * @module plugin\n *\n * @protected\n * @since 0.2.0\n */\n\n\n/**\n * Plugin keeps self name and transformation function.\n *\n * It's is a simple structure now, but in future may be extended for\n * providing additional functionality.\n *\n * @property {String} name - plugin's name.\n * @property {TransformerFn} transformer - transformation function.\n *\n * @protected\n * @since 0.2.0\n */\nclass Plugin {\n  /**\n   * Creates a plugin instance.\n   *\n   * @param {String} name - plugin's name.\n   * @param {TransformerFn} transformer - transformation function.\n   */\n  constructor(name, transformer) {\n    this.name = name;\n    this.transformer = transformer;\n  }\n\n  /**\n   * Applies transformation function to component instance and\n   * HTML element.\n   *\n   * @param {Component} component - component which will be transformed.\n   * @param {external:Element} element - element which associated\n   * with the component.\n   *\n   * @return {void} nothing.\n   *\n   * @since 0.2.0\n   */\n  transform(component, element) {\n    this.transformer(component, element);\n  }\n}\n\n\nexport default Plugin;\n"],"names":["getMatchesFn","const","e","document","documentElement","matches","matchesSelector","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","oMatchesSelector","element","selector","matchesFn","call","filterElements","elements","filter","Element","querySelector","tree","jquery","add","find","toArray","let","roots","NodeList","slice","Array","isArray","querySelectorAll","reduce","root","push","concat","createApplication","options","Application","createPlugin","name","initializer","Plugin","args","Builder","id","proto","plugins","this","getInitializer","body","components","cs","checkAndUpdateCache","createComponent","forEach","component","init","Object","keys","instance","property","transformComponent","ids","indexOf","plugin","transform","builders","isRunning","map","Function","readyState","setTimeout","start","bind","addEventListener","length","builder","vitalize","initialize","transformer"],"mappings":"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"}